# This file only contains some code snippets that i could be useful to use but not needed in this project

@POST
@Path("{provider}")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.TEXT_PLAIN)
public Response postMailConfig(@PathParam("provider") String provider, MailConfig mailConfig) {
	MorphiaConnector morphiaConnector = MorphiaConnector.getInstance();
	Datastore datastore = morphiaConnector.getConnection();
	mailConfig.setProvider(provider);
	
	URI createdResource = null;
	try {
		createdResource = new URI(uriInfo.getAbsolutePath().toString().toLowerCase());
	} catch (URISyntaxException e) {
		logger.error("postMailConfig() -> Error while creating URI for provider " + provider);
	}
	
	// Save the MailConfig object to the database
	try {
		logger.debug("postMailConfig() -> Saving new provider " + provider + " with content: " + mailConfig.toString());
    	datastore.save(mailConfig);
    } catch(Exception ex) {
    	logger.error("postMailConfig() -> Error while saving provider " + provider + ": " + ex);
    }    	
	
	datastore.getMongo().close();
	ResponseBuilder response = Response.created(createdResource).entity("New Provider " + provider + " successfully saved to the database with content: " + mailConfig.toString());
    return response.build();
}


// TODO remove after development
@GET
@Path("testing")
@Produces(MediaType.TEXT_PLAIN)
public Response getTest() {
	Properties props = new Properties();
	try {
		props.load(this.getClass().getResourceAsStream("/mongodb.properties"));
	} catch (IOException e) {
		e.printStackTrace();
	}
	
	return Response.status(200).entity(props.getProperty("mongodb.user") + " " + uriInfo.getPath()).build();
}